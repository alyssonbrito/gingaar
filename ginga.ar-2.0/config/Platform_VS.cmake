set(PLATFORM VS)

# This one is important
set(CMAKE_SYSTEM_NAME Windows)
SET(STRIP_TOOL "")

set(CMAKE_CXX_FLAGS "/W4 /EHsc /D_WIN32_WINNT=0x0501 /D_CRT_SECURE_NO_WARNINGS")
set(CMAKE_CXX_STANDARD_LIBRARIES "Ws2_32.lib ${CMAKE_CXX_STANDARD_LIBRARIES}")

file( TO_CMAKE_PATH $ENV{EXTERNALS_PATH} EXTERNALS_PATH )

#SET(ENV{SDLDIR}      ${EXTERNALS_PATH})
#SET(ENV{SDLIMAGEDIR} ${EXTERNALS_PATH})
#SET(ENV{SDLTTFDIR}   ${EXTERNALS_PATH})
#LIST(APPEND CMAKE_PREFIX_PATH $ENV{SDLDIR} $ENV{SDLIMAGEDIR} $ENV{SDLTTFDIR})

#SET(PNG_ROOT         ${EXTERNALS_PATH})

# Xerces
SET(ENV{XERCESCDIR} ${EXTERNALS_PATH})

# Lua
SET(ENV{LUA_DIR} ${EXTERNALS_PATH})

# DB
SET(ENV{DB_DIR} ${EXTERNALS_PATH})

# CEF
SET(ENV{CEF_DIR} ${EXTERNALS_PATH})

# ZLIB
SET(ENV{WINZLIB_DIR} ${EXTERNALS_PATH})

# CURL
SET(ENV{CURL_DIR} ${EXTERNALS_PATH})

# MNG
SET(ENV{MNG_DIR} ${EXTERNALS_PATH})

# Gal
SET(ENV{GAL_DIR} ${EXTERNALS_PATH})

# FontConfig
SET(ENV{FONTCONFIG_DIR} ${EXTERNALS_PATH})


# FreeType2
SET(ENV{FREETYPE2_DIR} ${EXTERNALS_PATH})

# FreeType
SET(ENV{FREETYPE_DIR} $ENV{GTKMM_BASEPATH})

# GDK-PixBuf
SET(ENV{GDK-PIXBUF_DIR} $ENV{GTKMM_BASEPATH})

# GLIB
SET(ENV{GLIB_DIR} $ENV{GTKMM_BASEPATH})

# PANGO
SET(ENV{PANGO_DIR} $ENV{GTKMM_BASEPATH})

# CAIRO
SET(ENV{CAIRO_DIR} $ENV{GTKMM_BASEPATH})

# GTK
#SET(GTK2_DEBUG TRUE)

# gtest
SET(GTEST_MSVC_SEARCH "MD") # << No creo que sirva esto
SET(GTEST_ROOT       ${EXTERNALS_PATH})

# Boost
SET(BOOST_ROOT  ${EXTERNALS_PATH} )
SET(Boost_NO_SYSTEM_PATHS TRUE)
#set(Boost_DEBUG TRUE)
set(Boost_USE_MULTITHREADED  ON)
set(Boost_USE_STATIC_RUNTIME OFF)
set(Boost_USE_STATIC_LIBS    OFF)

# no auto-link, 
# BOOST_PROGRAM_OPTIONS_DYN_LINK is required to properly import some symbols from program_options
# (http://lists.boost.org/boost-users/2009/11/54015.php)
add_definitions(/DBOOST_ALL_NO_LIB /DBOOST_PROGRAM_OPTIONS_DYN_LINK)

set(BUILD_CMD_FILE ALL_BUILD.vcxproj)
set(INSTALL_CMD_FILE INSTALL.vcxproj)

#macro used in build/CMakeLists 
macro(setVarsBuildPlatform BUILDDIR)
		SET(BUILD_CMD   cmake -E chdir "${BUILDDIR}" msbuild /p:Configuration=${CMAKE_BUILD_TYPE} ${BUILD_CMD_FILE})
		SET(INSTALL_CMD cmake -E chdir "${BUILDDIR}" msbuild /p:Configuration=${CMAKE_BUILD_TYPE} ${INSTALL_CMD_FILE})
endmacro(setVarsBuildPlatform)

macro(SET_OUTPUT_NAME outputvar project_name)
	SET(${outputvar} lib${LIB_PREFIX}${project_name})
	IF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
		SET(${outputvar} ${${outputvar}}d)
	ENDIF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
endmacro(SET_OUTPUT_NAME outputvar project_name)

#macro used in tvd.cmake
macro(install_external_dlls BIN_DESTINATION)
 		INCLUDE( InstallRequiredSystemLibraries )

		FILE( GLOB_RECURSE EXTERNALSBIN "$ENV{EXTERNALS_PATH}/*.dll" )
		
		INSTALL( FILES ${EXTERNALSBIN} 
			 DESTINATION ${BIN_DESTINATION}
			 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
				     GROUP_READ 	    GROUP_EXECUTE
				     WORLD_READ 	    WORLD_EXECUTE )

		INSTALL( PROGRAMS ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS} 
			 DESTINATION ${BIN_DESTINATION} 
			 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
				     GROUP_READ 	    GROUP_EXECUTE
				     WORLD_READ 	    WORLD_EXECUTE )

		INCLUDE_IF_EXIST("${PROJECT_SOURCE_DIR}/install.${PROJECT_NAME_UPPERCASE}.cmake")
			
		INSTALL_COLLECTED( PBI_DIRS DIRECTORY )
		INSTALL_COLLECTED( PBI_FILES FILES )
		
#		INSTALL_COLLECTED( PBI_DIRS DIRECTORY "${BIN_DESTINATION}" ) 
#		INSTALL_COLLECTED( PBI_FILES FILES "${BIN_DESTINATION}" ) 

endmacro(install_external_dlls)
