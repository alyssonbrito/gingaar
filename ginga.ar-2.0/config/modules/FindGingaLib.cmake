# - Find Ginga Lib
# Find native ginga includes and library
# This module defines
#  GINGALIB-${COMPONENT}_INCLUDE_DIRS, where to find the ginga component header files.
#  GINGALIB-${COMPONENT}_LIBRARIES, the libraries needed to use the ginga component.
#  GINGALIB-${COMPONENT}_FOUND, If false, do not try to use the ginga component library.
# also defined, but not for general use are
#  GINGALIB-${COMPONENT}_LIBRARY, where to find the ginga component library.
#  GINGALIB_NAMES_COMPONENTS, the list of all the requested components
#  GINGALIB_FOUND_NAMES, the list of the requested components that were found

IF( GingaLib_FIND_COMPONENTS )

	# save the original suffix and prefix
	SET( _ginga_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
	SET( _ginga_ORIG_CMAKE_FIND_LIBRARY_PREFIXES ${CMAKE_FIND_LIBRARY_PREFIXES})
	SET(CMAKE_FIND_LIBRARY_PREFIXES lib ${CMAKE_FIND_LIBRARY_PREFIXES})
	
	IF(WIN32)
		IF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
			SET(CMAKE_FIND_LIBRARY_SUFFIXES d)
		ELSE(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
			SET(CMAKE_FIND_LIBRARY_SUFFIXES "" )
		ENDIF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
		
		IF(BUILD_SHARED)
			SET(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES}.dll)
		ELSE()
			SET(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES}.lib ${CMAKE_FIND_LIBRARY_SUFFIXES}.a)
		ENDIF()
	ELSE()
		IF(BUILD_SHARED) 
			SET(CMAKE_FIND_LIBRARY_SUFFIXES .so)
		ELSE()
			SET(CMAKE_FIND_LIBRARY_SUFFIXES .a)
		ENDIF()
	ENDIF()

	SET(GINGALIB_NAMES_COMPONENTS ${GingaLib_FIND_COMPONENTS})
	SET(GINGALIB_FOUND_NAMES "")
	FOREACH(COMPONENT ${GingaLib_FIND_COMPONENTS})
		STRING(TOUPPER 	${COMPONENT} COMPONENT_UPPERCASE)

		FIND_PATH(GINGALIB-${COMPONENT_UPPERCASE}_INCLUDE_DIRS ${COMPONENT} PATH_SUFFIXES lifia)

		SET(GINGALIB-${COMPONENT_UPPERCASE}_NAMES ${LIB_PREFIX}${COMPONENT})
		FIND_LIBRARY(GINGALIB-${COMPONENT_UPPERCASE}_LIBRARY NAMES ${GINGALIB-${COMPONENT_UPPERCASE}_NAMES} PATH_SUFFIXES lifia )

		# handle the QUIETLY and REQUIRED arguments and set GINGALIB-${COMPONENT_UPPERCASE}_FOUND to TRUE if 
		# all listed variables are TRUE
		INCLUDE(FindPackageHandleStandardArgs)
		set(GINGALIB-${COMPONENT_UPPERCASE}_FIND_REQUIRED ${GingaLib_FIND_REQUIRED} )
		FIND_PACKAGE_HANDLE_STANDARD_ARGS(GINGALIB-${COMPONENT_UPPERCASE} DEFAULT_MSG GINGALIB-${COMPONENT_UPPERCASE}_LIBRARY GINGALIB-${COMPONENT_UPPERCASE}_INCLUDE_DIRS)

		IF(GINGALIB-${COMPONENT_UPPERCASE}_FOUND)
			SET(GINGALIB-${COMPONENT_UPPERCASE}_LIBRARIES ${GINGALIB-${COMPONENT_UPPERCASE}_LIBRARY})
			LIST(APPEND GINGALIB_FOUND_NAMES "GINGALIB-${COMPONENT_UPPERCASE}")
		ENDIF(GINGALIB-${COMPONENT_UPPERCASE}_FOUND)

		MARK_AS_ADVANCED(GINGALIB-${COMPONENT_UPPERCASE}_LIBRARY GINGALIB-${COMPONENT_UPPERCASE}_INCLUDE_DIRS )

	ENDFOREACH( COMPONENT )

	# restore the originals
	SET(CMAKE_FIND_LIBRARY_SUFFIXES ${_ginga_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
	IF(DEFINED _ginga_ORIG_CMAKE_FIND_LIBRARY_PREFIXES)
		SET(CMAKE_FIND_LIBRARY_PREFIXES ${_ginga_ORIG_CMAKE_FIND_LIBRARY_PREFIXES})
	ELSE()
		SET(CMAKE_FIND_LIBRARY_PREFIXES "")
	ENDIF()
ENDIF( GingaLib_FIND_COMPONENTS )
